"use strict";
import BigNumber from "bignumber.js";
import { Address, Hash } from "../commonTypes";
import { ContractWrapperBase } from "../contractWrapperBase";
import { ContractWrapperFactory } from "../contractWrapperFactory";
import { ArcTransactionResult, IContractWrapperFactory, DecodedLogEntryEvent } from "../iContractWrapperBase";
import { TxGeneratingFunctionOptions } from "../transactionService";
import { AggregatedEventsResult, EntityFetcherFactory, EventToAggregate, Web3EventService } from "../web3EventService";
import { WrapperService } from "../wrapperService";
import { RedeemEventResult } from "./commonEventInterfaces";

export class RedeemerWrapper extends ContractWrapperBase {
  public name: string = "Redeemer";
  public friendlyName: string = "Redeemer";
  public factory: IContractWrapperFactory<RedeemerWrapper> = RedeemerFactory;

  /**
   * Redeems rewards for a ContributionReward proposal in a single transaction.
   * Calls execute on the proposal if it is not yet executed.
   * Redeems rewardable reputation and stake from the GenesisProtocol.
   * Redeem rewardable contribution proposal rewards.
   * @param options
   */
  public async redeem(options: RedeemerOptions & TxGeneratingFunctionOptions)
    : Promise<ArcTransactionResult> {

    if (!options.avatarAddress) {
      throw new Error("avatarAddress is not defined");
    }

    if (!options.beneficiaryAddress) {
      throw new Error("beneficiaryAddress is not defined");
    }

    if (!options.proposalId) {
      throw new Error("proposalId is not defined");
    }

    this.logContractFunctionCall("Redeemer.redeem", options);

    return this.wrapTransactionInvocation("Redeemer.redeem",
      options,
      this.contract.redeem,
      [options.proposalId, options.avatarAddress, options.beneficiaryAddress]
    );
  }

  /**
   * Obtain an `EntityFetcherFactory` that enables you to get, watch and subscribe to events that
   * return a `RedeemerRewardEventsResult` when rewards are rewarded, either via `Redeemer.redeem`
   * or directly via `GenesisProtocol` and `ContributionReward`.
   *
   * This only finds transactions that happen after you have initiated the get or watch.  It does
   * not look back in time.
   *
   * The returned EntityFetcher ignores the `argFilter` and `web3Filter` arguments.
   * The 'get' functions ignore `requiredDepth` (pass it in here).
   *
   * While rewards generated by `Redeemer.redeem` will result in a single event here, rewards
   * generated directly via `GenesisProtocol` and `ContributionReward` will give you multiple events.
   * @param options
   */
  public rewardsEvents(requiredDepth: number = 0):
    EntityFetcherFactory<RedeemerRewardEventsResult, AggregatedEventsResult> {

    const web3EventService = new Web3EventService();
    const eventSpecifiersMap = new Map<EventToAggregate, string>();
    const genesisProtocol = WrapperService.wrappers.GenesisProtocol;
    const contributionReward = WrapperService.wrappers.ContributionReward;

    /* tslint:disable:max-line-length */
    eventSpecifiersMap.set({ eventName: "Redeem", contract: genesisProtocol }, "rewardGenesisProtocolTokens");
    eventSpecifiersMap.set({ eventName: "RedeemReputation", contract: genesisProtocol }, "rewardGenesisProtocolReputation");
    eventSpecifiersMap.set({ eventName: "RedeemDaoBounty", contract: genesisProtocol }, "bountyGenesisProtocolDao");
    eventSpecifiersMap.set({ eventName: "RedeemReputation", contract: contributionReward }, "rewardContributionReputation");
    eventSpecifiersMap.set({ eventName: "RedeemEther", contract: contributionReward }, "rewardContributionEther");
    eventSpecifiersMap.set({ eventName: "RedeemNativeToken", contract: contributionReward }, "rewardContributionNativeToken");
    eventSpecifiersMap.set({ eventName: "RedeemExternalToken", contract: contributionReward }, "rewardContributionExternalToken");
    /* tslint:enable:max-line-length */

    const baseFetcherFactory = web3EventService.aggregatedEventsFetcherFactory(
      Array.from(eventSpecifiersMap.keys()),
      requiredDepth);

    return web3EventService.pipeEntityFetcherFactory(
      baseFetcherFactory,
      (aggregatedEventResult: AggregatedEventsResult): Promise<RedeemerRewardEventsResult | undefined> => {

        const events: Array<DecodedLogEntryEvent<RedeemEventResult>> =
          Array.from(aggregatedEventResult.events.values());
        const proposalId = events[0].args._proposalId;
        const result = {
          proposalId,
          transactionHash: aggregatedEventResult.txReceipt.transactionHash,
        } as RedeemerRewardEventsResult;

        /**
         * get all the reward amounts
         */
        for (const eventSpecifier of eventSpecifiersMap.keys()) {
          const event = aggregatedEventResult.events.get(eventSpecifier) as DecodedLogEntryEvent<RedeemEventResult>;
          result[eventSpecifiersMap.get(eventSpecifier)] = event ? event.args._amount : new BigNumber(0);
        }

        /**
         * get the GP beneficiary, if there is one
         */
        for (const eventSpecifier of aggregatedEventResult.events.keys()) {

          const propertyName = eventSpecifiersMap.get(eventSpecifier);

          if ([
            "rewardGenesisProtocolTokens",
            "rewardGenesisProtocolReputation",
            "bountyGenesisProtocolDao"].indexOf(propertyName) !== -1) {

            const event = aggregatedEventResult.events.get(eventSpecifier) as DecodedLogEntryEvent<RedeemEventResult>;
            result.beneficiaryGenesisProtocol = event.args._beneficiary;
            break;
          }
        }

        /**
         * get the CR beneficiary, if there is one
         */
        for (const eventSpecifier of aggregatedEventResult.events.keys()) {
          const propertyName = eventSpecifiersMap.get(eventSpecifier);

          if ([
            "rewardContributionReputation",
            "rewardContributionEther",
            "rewardContributionNativeToken",
            "rewardContributionExternalToken"].indexOf(propertyName) !== -1) {

            const event = aggregatedEventResult.events.get(eventSpecifier) as DecodedLogEntryEvent<RedeemEventResult>;
            result.beneficiaryContributionReward = event.args._beneficiary;
            break;
          }
        }
        return Promise.resolve(result);
      });
  }
}

/**
 * defined just to add good type checking
 */
export class RedeemerFactoryType extends ContractWrapperFactory<RedeemerWrapper> {

  public async new(
    contributionRewardAddress: Address,
    genesisProtocolAddress: Address): Promise<RedeemerWrapper> {
    return super.new(contributionRewardAddress, genesisProtocolAddress);
  }
}

export const RedeemerFactory =
  new RedeemerFactoryType(
    "Redeemer",
    RedeemerWrapper,
    new Web3EventService()) as RedeemerFactoryType;

export interface RedeemerOptions extends TxGeneratingFunctionOptions {
  avatarAddress: Address;
  beneficiaryAddress: Address;
  proposalId: Hash;
}

export interface RedeemerRewardEventsResult {
  beneficiaryGenesisProtocol: Address;
  beneficiaryContributionReward: Address;
  bountyGenesisProtocolDao: BigNumber;
  proposalId: Hash;
  rewardContributionEther: BigNumber;
  rewardContributionExternalToken: BigNumber;
  rewardContributionNativeToken: BigNumber;
  rewardContributionReputation: BigNumber;
  rewardGenesisProtocolTokens: BigNumber;
  rewardGenesisProtocolReputation: BigNumber;
  transactionHash: Hash;
}
